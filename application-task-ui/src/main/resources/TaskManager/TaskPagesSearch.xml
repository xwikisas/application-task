<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="TaskManager.TaskPagesSearch" locale="">
  <web>TaskManager</web>
  <name>TaskPagesSearch</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>TaskPagesSearch</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#if($xcontext.action == 'get' &amp;&amp; "$!{request.outputSyntax}" == 'plain')
  #set ($statement = "FROM doc.object(TaskManager.TaskManagerClass) AS taskObject WHERE doc.fullName &lt;&gt; 'TaskManager.TaskManagerTemplate' AND lower(doc.fullName) LIKE lower(:param)")
  #set ($param = $services.query.parameter().anyChars().literal("$!request.text").anyChars())
  #set ($query = $services.query.xwql($statement).addFilter('unique').addFilter('document').setLimit(10).bindValue('param', $param))
  #set ($array = [])
  #foreach ($taskReference in $query.execute())
    #if ($services.security.authorization.hasAccess("view", $taskReference))
      #set ($discard = $array.add({
        'label': $taskReference.name,
        'value': $services.model.serialize($taskReference, 'compactwiki'),
        'hint':  $services.model.serialize($taskReference.parent, 'compactwiki')
      }))
    #end
  #end
  #jsonResponse($array)
#end
{{/velocity}}</content>
  <object>
    <name>TaskManager.TaskPagesSearch</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>40ced98a-838a-405e-b370-a1ce6aeb124b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    'xwiki-selectize': "$xwiki.getSkinFile('uicomponents/suggest/xwiki.selectize.js', true)" +
      "?v=$escapetool.url($xwiki.version)"
  }
});

require(['jquery', 'xwiki-selectize'], function($) {
  var searchServiceDocRef = XWiki.Model.resolve('TaskManager.TaskPagesSearch', XWiki.EntityType.DOCUMENT,
    XWiki.currentDocument.getDocumentReference());
  var searchServiceURL = new XWiki.Document(searchServiceDocRef).getURL('get', 'outputSyntax=plain');
  var errorHandler = function(response, callback) {
    console.log('Failed to get the JSON from [' + searchServiceURL + ']. Reason: ' + response.status + ' ' + response.statusText);
    callback([]);
  };
  var settings = {
    load: function(typedText, callback) {
      $.getJSON(searchServiceURL, {
        text: typedText
      }).done(callback).fail(function (response) {
        errorHandler(response, callback);
      });
    },
    loadSelected: function(selectedValue, callback) {
      $.getJSON(searchServiceURL, {
        text: selectedValue,
        exactMatch: true
      }).done(callback).fail(function (response) {
        errorHandler(response, callback);
      });
    }
  };
  $('.suggest-task-pages').xwikiSelectize(settings);
  $(document).on('shown.bs.modal', '.modal', function () {
    $('.suggest-task-pages').xwikiSelectize(settings);
  });
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
